import cv2
import numpy as np
import matplotlib.pyplot as plt
from IPython.display import display, Image

fig = plt.figure(figsize=(10, 7))
rows = 6
columns = 2
img_path = "cat.jpg"
img_path2="prueba.jpg"
img = cv2.imread(img_path)
img2 = cv2.imread(img_path2)  
fig.add_subplot(rows, columns, 1)
plt.imshow(img)
plt.axis('off')
plt.title("primera")
fig.add_subplot(rows, columns, 2)
plt.imshow(img2)
plt.axis('off')
plt.title("segunda")
fig.add_subplot(rows, columns, 3)
plt.axis('off')
plt.title("MATEMATICA")
plt.text(.5, 0.5, 'NINGUNA, ES UN MENU', horizontalalignment='center', verticalalignment='center')
fig.add_subplot(rows, columns, 4)
plt.axis('off')
plt.title("RESPUESTA")

def onclick(event):
    fig = plt.figure(figsize=(10, 7))
    rows = 4
    columns = 2
    img_path = "cat.jpg"
    img_path2="prueba.jpg"
    img = cv2.imread(img_path)
    img2 = cv2.imread(img_path2)
    res= img + img2
    fig.add_subplot(rows, columns, 1)
    plt.imshow(img)
    plt.axis('off')
    plt.title("primera")
    fig.add_subplot(rows, columns, 2)
    plt.imshow(img2)
    plt.axis('off')
    plt.title("segunda")
    fig.add_subplot(rows, columns, 3)
    plt.axis('off')
    plt.title("MATEMATICA")
    plt.text(.5, 0.5, 'SUMA', horizontalalignment='center', verticalalignment='center')
    fig.add_subplot(rows, columns, 4)
    plt.imshow(res)
    plt.axis('off')
    plt.title("RESPUESTA")
    def onclick(event2):
        fig = plt.figure(figsize=(10, 7))
        rows = 4
        columns = 2
        img_path = "cat.jpg"
        img_path2="prueba.jpg"
        img = cv2.imread(img_path)
        img2 = cv2.imread(img_path2)
        res= img - img2
        fig.add_subplot(rows, columns, 1)
        plt.imshow(img)
        plt.axis('off')
        plt.title("primera")
        fig.add_subplot(rows, columns, 2)
        plt.imshow(img2)
        plt.axis('off')
        plt.title("segunda")
        fig.add_subplot(rows, columns, 3)
        plt.axis('off')
        plt.title("MATEMATICA")
        plt.text(.5, 0.5, 'RESTA', horizontalalignment='center', verticalalignment='center')
        fig.add_subplot(rows, columns, 4)
        plt.imshow(res)
        plt.axis('off')
        plt.title("RESPUESTA")
        def onclick(event3):
            fig = plt.figure(figsize=(10, 7))
            rows = 4
            columns = 2
            img_path = "cat.jpg"
            img_path2="prueba.jpg"
            img = cv2.imread(img_path)
            img2 = cv2.imread(img_path2)
            res= img / img2
            fig.add_subplot(rows, columns, 1)
            plt.imshow(img)
            plt.axis('off')
            plt.title("primera")
            fig.add_subplot(rows, columns, 2)
            plt.imshow(img2)
            plt.axis('off')
            plt.title("segunda")
            fig.add_subplot(rows, columns, 3)
            plt.axis('off')
            plt.title("MATEMATICA")
            plt.text(.5, 0.5, 'DIVISION', horizontalalignment='center', verticalalignment='center')
            fig.add_subplot(rows, columns, 4)
            plt.imshow(res)
            plt.axis('off')
            plt.title("RESPUESTA")
            def onclick(event4):
                fig = plt.figure(figsize=(10, 7))
                rows = 4
                columns = 2
                img_path = "cat.jpg"
                img_path2="prueba.jpg"
                img = cv2.imread(img_path)
                img2 = cv2.imread(img_path2)
                res= img * img2
                fig.add_subplot(rows, columns, 1)
                plt.imshow(img)
                plt.axis('off')
                plt.title("primera")
                fig.add_subplot(rows, columns, 2)
                plt.imshow(img2)
                plt.axis('off')
                plt.title("segunda")
                fig.add_subplot(rows, columns, 3)
                plt.axis('off')
                plt.title("MATEMATICA")
                plt.text(.5, 0.5, 'MULTIPLICACION', horizontalalignment='center', verticalalignment='center')
                fig.add_subplot(rows, columns, 4)
                plt.imshow(res)
                plt.axis('off')
                plt.title("RESPUESTA")
                def onclick(event5):
                    fig = plt.figure(figsize=(10, 7))
                    rows = 4
                    columns = 2
                    img_path = "cat.jpg"
                    img_path2="prueba.jpg"
                    img = cv2.imread(img_path)
                    img2 = cv2.imread(img_path2)
                    c = 255 / np.log(1 + np.max(img))
                    res1  = c * (np.log(img + 1))
                    res1  = np.array(res1, dtype = np.uint8)
                    c = 255 / np.log(1 + np.max(img2))
                    res2  = c * (np.log(img2 + 1))
                    res2  = np.array(res2, dtype = np.uint8)
                    res = res1 + res2
                    fig.add_subplot(rows, columns, 1)
                    plt.imshow(img)
                    plt.axis('off')
                    plt.title("primera")
                    fig.add_subplot(rows, columns, 2)
                    plt.imshow(img2)
                    plt.axis('off')
                    plt.title("segunda")
                    fig.add_subplot(rows, columns, 3)
                    plt.axis('off')
                    plt.title("MATEMATICA")
                    plt.text(.5, 0.5, 'Suma de LOGARITMO NATURAL', horizontalalignment='center', verticalalignment='center')
                    fig.add_subplot(rows, columns, 4)
                    plt.imshow(res)
                    plt.axis('off')
                    plt.title("RESPUESTA")
                    def onclick(event6):
                        fig = plt.figure(figsize=(10, 7))
                        rows = 4
                        columns = 2
                        img_path = "cat.jpg"
                        img_path2="prueba.jpg"
                        img = cv2.imread(img_path)
                        img2 = cv2.imread(img_path2)
                        c = 255 / np.sqrt(1 + np.max(img))
                        res1  = c * (np.sqrt(img + 1))
                        res1  = np.array(res1, dtype = np.uint8)
                        c = 255 / np.sqrt(1 + np.max(img2))
                        res2  = c * (np.sqrt(img2 + 1))
                        res2  = np.array(res2, dtype = np.uint8)
                        res = res1 + res2
                        fig.add_subplot(rows, columns, 1)
                        plt.imshow(img)
                        plt.axis('off')
                        plt.title("primera")
                        fig.add_subplot(rows, columns, 2)
                        plt.imshow(img2)
                        plt.axis('off')
                        plt.title("segunda")
                        fig.add_subplot(rows, columns, 3)
                        plt.axis('off')
                        plt.title("MATEMATICA")
                        plt.text(.5, 0.5, 'SUMA DE RAIZ CUADRADA', horizontalalignment='center', verticalalignment='center')
                        fig.add_subplot(rows, columns, 4)
                        plt.imshow(res)
                        plt.axis('off')
                        plt.title("RESPUESTA")
                        def onclick(event8):
                            fig = plt.figure(figsize=(10, 7))
                            rows = 4
                            columns = 2
                            img_path = "cat.jpg"
                            img_path2="prueba.jpg"
                            img = cv2.imread(img_path)
                            img2 = cv2.imread(img_path2)
                            c = 255 / np.log(1 + np.max(img))
                            res1  = c * (np.log(img + 1))
                            res1  = np.array(res1, dtype = np.uint8)
                            c = 255 / np.log(1 + np.max(img2))
                            res2  = c * (np.log(img2 + 1))
                            res2  = np.array(res2, dtype = np.uint8)
                            res3  = res1 + res2

                            res= cv2.Laplacian(res3,cv2.CV_64F)
                            fig.add_subplot(rows, columns, 1)
                            plt.imshow(img)
                            plt.axis('off')
                            plt.title("primera")
                            fig.add_subplot(rows, columns, 2)
                            plt.imshow(img2)
                            plt.axis('off')
                            plt.title("segunda")
                            fig.add_subplot(rows, columns, 3)
                            plt.axis('off')
                            plt.title("MATEMATICA")
                            plt.text(.5, 0.5, 'DERIVADA/GRADIENTE MEDIANTE LAPLACIANO', horizontalalignment='center', verticalalignment='center')
                            fig.add_subplot(rows, columns, 4)
                            plt.imshow(res)
                            plt.axis('off')
                            plt.title("RESPUESTA")
                            def onclick(event9):
                                fig = plt.figure(figsize=(10, 7))
                                rows = 4
                                columns = 2
                                img_path = "cat.jpg"
                                img_path2="prueba.jpg"
                                img = cv2.imread(img_path)
                                img2 = cv2.imread(img_path2)
                                c = 255 / np.log(1 + np.max(img))
                                res1  = c * (np.log(img + 1))
                                res1  = np.array(res1, dtype = np.uint8)
                                c = 255 / np.log(1 + np.max(img2))
                                res2  = c * (np.log(img2 + 1))
                                res2  = np.array(res2, dtype = np.uint8)
                                res3  = res1 + res2
                                cv2.imwrite('raiz.jpg',res3)
                                po=cv2.imread('raiz.jpg',0)
                                res=np.power(po/float(np.max(po)),1.5)
                                fig.add_subplot(rows, columns, 1)
                                plt.imshow(img)
                                plt.axis('off')
                                plt.title("primera")
                                fig.add_subplot(rows, columns, 2)
                                plt.imshow(img2)
                                plt.axis('off')
                                plt.title("segunda")
                                fig.add_subplot(rows, columns, 3)
                                plt.axis('off')
                                plt.title("MATEMATICA")
                                plt.text(.5, 0.5, 'POTENCIA/GAMMA DE LA RAIZ CUADRADA', horizontalalignment='center', verticalalignment='center')
                                fig.add_subplot(rows, columns, 4)
                                plt.imshow(res)
                                plt.axis('off')
                                plt.title("RESPUESTA")
                                def onclick(event10):
                                    fig = plt.figure(figsize=(10, 7))
                                    rows = 4
                                    columns = 2
                                    img_path = "cat.jpg"
                                    img_path2="prueba.jpg"
                                    img = cv2.imread(img_path)
                                    img2 = cv2.imread(img_path2)
                                    res= cv2.bitwise_and(img,img2)
                                    fig.add_subplot(rows, columns, 1)
                                    plt.imshow(img)
                                    plt.axis('off')
                                    plt.title("primera")
                                    fig.add_subplot(rows, columns, 2)
                                    plt.imshow(img2)
                                    plt.axis('off')
                                    plt.title("segunda")
                                    fig.add_subplot(rows, columns, 3)
                                    plt.axis('off')
                                    plt.title("MATEMATICA")
                                    plt.text(.5, 0.5, 'CONJUNCION', horizontalalignment='center', verticalalignment='center')
                                    fig.add_subplot(rows, columns, 4)
                                    plt.imshow(res)
                                    plt.axis('off')
                                    plt.title("RESPUESTA")
                                    def onclick(event11):
                                        fig = plt.figure(figsize=(10, 7))
                                        rows = 4
                                        columns = 2
                                        img_path = "cat.jpg"
                                        img_path2="prueba.jpg"
                                        img = cv2.imread(img_path)
                                        img2 = cv2.imread(img_path2)
                                        res= cv2.bitwise_or(img,img2)
                                        fig.add_subplot(rows, columns, 1)
                                        plt.imshow(img)
                                        plt.axis('off')
                                        plt.title("primera")
                                        fig.add_subplot(rows, columns, 2)
                                        plt.imshow(img2)
                                        plt.axis('off')
                                        plt.title("segunda")
                                        fig.add_subplot(rows, columns, 3)
                                        plt.axis('off')
                                        plt.title("MATEMATICA")
                                        plt.text(.5, 0.5, 'DISYUNCION', horizontalalignment='center', verticalalignment='center')
                                        fig.add_subplot(rows, columns, 4)
                                        plt.imshow(res)
                                        plt.axis('off')
                                        plt.title("RESPUESTA")
                                        def onclick(event12):
                                            fig = plt.figure(figsize=(10, 7))
                                            rows = 4
                                            columns = 2
                                            img_path = "cat.jpg"
                                            img_path2="prueba.jpg"
                                            img = cv2.imread(img_path)
                                            img2 = cv2.imread(img_path2)
                                            res= cv2.bitwise_not(img,img2)
                                            fig.add_subplot(rows, columns, 1)
                                            plt.imshow(img)
                                            plt.axis('off')
                                            plt.title("primera")
                                            fig.add_subplot(rows, columns, 2)
                                            plt.imshow(img2)
                                            plt.axis('off')
                                            plt.title("segunda")
                                            fig.add_subplot(rows, columns, 3)
                                            plt.axis('off')
                                            plt.title("MATEMATICA")
                                            plt.text(.5, 0.5, 'NEGACION', horizontalalignment='center', verticalalignment='center')
                                            fig.add_subplot(rows, columns, 4)
                                            plt.imshow(res)
                                            plt.axis('off')
                                            plt.title("RESPUESTA")
                                            def onclick(event13):
                                                fig = plt.figure(figsize=(10, 7))
                                                rows = 4
                                                columns = 2
                                                img_path = "cat.jpg"
                                                img_path2="prueba.jpg"
                                                img = cv2.imread(img_path)
                                                img2 = cv2.imread(img_path2)
                                                M = np.float32([[1,0,100],[0,1,150]])
                                                res = cv2.warpAffine(img,M,(img.shape[1],img.shape[0]))
                                                fig.add_subplot(rows, columns, 1)
                                                plt.imshow(img)
                                                plt.axis('off')
                                                plt.title("primera")
                                                fig.add_subplot(rows, columns, 2)
                                                plt.imshow(img2)
                                                plt.axis('off')
                                                plt.title("segunda")
                                                fig.add_subplot(rows, columns, 3)
                                                plt.axis('off')
                                                plt.title("MATEMATICA")
                                                plt.text(.5, 0.5, 'TRASLACION', horizontalalignment='center', verticalalignment='center')
                                                fig.add_subplot(rows, columns, 4)
                                                plt.imshow(res)
                                                plt.axis('off')
                                                plt.title("RESPUESTA")
                                                def onclick(event14):
                                                    fig = plt.figure(figsize=(10, 7))
                                                    rows = 4
                                                    columns = 2
                                                    img_path = "cat.jpg"
                                                    img_path2="prueba.jpg"
                                                    img = cv2.imread(img_path)
                                                    img2 = cv2.imread(img_path2)
                                                    res = cv2.resize(img,(600,300))
                                                    fig.add_subplot(rows, columns, 1)
                                                    plt.imshow(img)
                                                    plt.axis('off')
                                                    plt.title("primera")
                                                    fig.add_subplot(rows, columns, 2)
                                                    plt.imshow(img2)
                                                    plt.axis('off')
                                                    plt.title("segunda")
                                                    fig.add_subplot(rows, columns, 3)
                                                    plt.axis('off')
                                                    plt.title("MATEMATICA")
                                                    plt.text(.5, 0.5, 'ESCALADO', horizontalalignment='center', verticalalignment='center')
                                                    fig.add_subplot(rows, columns, 4)
                                                    plt.imshow(res)
                                                    plt.axis('off')
                                                    plt.title("RESPUESTA")
                                                    def onclick(event15):
                                                        fig = plt.figure(figsize=(10, 7))
                                                        rows = 4
                                                        columns = 2
                                                        img_path = "cat.jpg"
                                                        img_path2="prueba.jpg"
                                                        img = cv2.imread(img_path)
                                                        img2 = cv2.imread(img_path2)
                                                        M = cv2.getRotationMatrix2D((img.shape[1]//2,img.shape[0]//2),15,1)
                                                        res = cv2.warpAffine(img,M,(img.shape[1],img.shape[0]))
                                                        fig.add_subplot(rows, columns, 1)
                                                        plt.imshow(img)
                                                        plt.axis('off')
                                                        plt.title("primera")
                                                        fig.add_subplot(rows, columns, 2)
                                                        plt.imshow(img2)
                                                        plt.axis('off')
                                                        plt.title("segunda")
                                                        fig.add_subplot(rows, columns, 3)
                                                        plt.axis('off')
                                                        plt.title("MATEMATICA")
                                                        plt.text(.5, 0.5, 'ROTACION', horizontalalignment='center', verticalalignment='center')
                                                        fig.add_subplot(rows, columns, 4)
                                                        plt.imshow(res)
                                                        plt.axis('off')
                                                        plt.title("RESPUESTA")
                                                        def onclick(event16):
                                                            fig = plt.figure(figsize=(10, 7))
                                                            rows = 4
                                                            columns = 2
                                                            img_path = "cat.jpg"
                                                            img_path2="prueba.jpg"
                                                            img = cv2.imread(img_path)
                                                            img2 = cv2.imread(img_path2)
                                                            filas,columnas = img.shape[:2]
                                                            pts1 = np.float32([[50,50],[200,50],[50,200]])
                                                            pts2 = np.float32([[10,100],[200,50],[100,250]])
                                                            M = cv2.getAffineTransform(pts1,pts2)
                                                            res = cv2.warpAffine(img,M,(filas,columnas))
                                                            fig.add_subplot(rows, columns, 1)
                                                            plt.imshow(img)
                                                            plt.axis('off')
                                                            plt.title("primera")
                                                            fig.add_subplot(rows, columns, 2)
                                                            plt.imshow(img2)
                                                            plt.axis('off')
                                                            plt.title("segunda")
                                                            fig.add_subplot(rows, columns, 3)
                                                            plt.axis('off')
                                                            plt.title("MATEMATICA")
                                                            plt.text(.5, 0.5, 'AFIN', horizontalalignment='center', verticalalignment='center')
                                                            fig.add_subplot(rows, columns, 4)
                                                            plt.imshow(res)
                                                            plt.axis('off')
                                                            plt.title("RESPUESTA")
                                                            def onclick(event17):
                                                                fig = plt.figure(figsize=(10, 7))
                                                                rows = 4
                                                                columns = 2
                                                                img_path = "cat.jpg"
                                                                img_path2="prueba.jpg"
                                                                img = cv2.imread(img_path)
                                                                img2 = cv2.imread(img_path2)
                                                                res= cv2.transpose(img)
                                                                fig.add_subplot(rows, columns, 1)
                                                                plt.imshow(img)
                                                                plt.axis('off')
                                                                plt.title("primera")
                                                                fig.add_subplot(rows, columns, 2)
                                                                plt.imshow(img2)
                                                                plt.axis('off')
                                                                plt.title("segunda")
                                                                fig.add_subplot(rows, columns, 3)
                                                                plt.axis('off')
                                                                plt.title("MATEMATICA")
                                                                plt.text(.5, 0.5, 'TRANSPUESTA', horizontalalignment='center', verticalalignment='center')
                                                                fig.add_subplot(rows, columns, 4)
                                                                plt.imshow(res)
                                                                plt.axis('off')
                                                                plt.title("RESPUESTA")
                                                                def onclick(event18):
                                                                    fig = plt.figure(figsize=(10, 7))
                                                                    rows = 4
                                                                    columns = 2
                                                                    img_path = "cat.jpg"
                                                                    img_path2="prueba.jpg"
                                                                    img = cv2.imread(img_path)
                                                                    img2 = cv2.imread(img_path2)

                                                                    fig.add_subplot(rows, columns, 1)
                                                                    plt.imshow(img)
                                                                    plt.axis('off')
                                                                    plt.title("primera")
                                                                    fig.add_subplot(rows, columns, 2)
                                                                    plt.imshow(img2)
                                                                    plt.axis('off')
                                                                    plt.title("segunda")
                                                                    fig.add_subplot(rows, columns, 3)
                                                                    plt.axis('off')
                                                                    plt.title("MATEMATICA")
                                                                    plt.text(.5, 0.5, 'PROYECCION', horizontalalignment='center', verticalalignment='center')
                                                                    fig.add_subplot(rows, columns, 4)
                                                                
                                                                    plt.axis('off')
                                                                    plt.title("RESPUESTA")
                                                                    cid = fig.canvas.mpl_connect('button_press_event', onclick)
                                                                    plt.figure()
                                                                    color = ('b','g','r')
                                                                    for i, c in enumerate(color):
                                                                        hist = cv2.calcHist([res], [i], None, [256], [0, 256])
                                                                        plt.plot(hist, color = c)
                                                                        plt.xlim([0,256])
                                                                    plt.title("Histograma RGB, img 2")
                                                                    plt.xlabel("Valor del color")
                                                                    plt.ylabel("cantidad de pixeles")
                                                                    plt.figure()
                                                                    R, G, B = cv2.split(res)
                                                                    output1_R = cv2.equalizeHist(R)
                                                                    output1_G = cv2.equalizeHist(G)
                                                                    output1_B = cv2.equalizeHist(B)
                                                                    equ = cv2.merge((output1_R, output1_G, output1_B))
                                                                    plt.imshow(equ)
                                                                    plt.figure()
                                                                    color = ('b','g','r')
                                                                    for i, c in enumerate(color):
                                                                        hist = cv2.calcHist([equ], [i], None, [256], [0, 256])
                                                                        plt.plot(hist, color = c)
                                                                        plt.xlim([0,256])
                                                                    plt.title("Histograma RGB, img 2")
                                                                    plt.xlabel("Valor del color")
                                                                    plt.ylabel("cantidad de pixeles")
                                                                    plt.show()
                                                                cid = fig.canvas.mpl_connect('button_press_event', onclick)
                                                                plt.figure()
                                                                color = ('b','g','r')
                                                                for i, c in enumerate(color):
                                                                    hist = cv2.calcHist([res], [i], None, [256], [0, 256])
                                                                    plt.plot(hist, color = c)
                                                                    plt.xlim([0,256])
                                                                plt.title("Histograma RGB, img 2")
                                                                plt.xlabel("Valor del color")
                                                                plt.ylabel("cantidad de pixeles")
                                                                plt.figure()
                                                                R, G, B = cv2.split(res)
                                                                output1_R = cv2.equalizeHist(R)
                                                                output1_G = cv2.equalizeHist(G)
                                                                output1_B = cv2.equalizeHist(B)
                                                                equ = cv2.merge((output1_R, output1_G, output1_B))
                                                                plt.imshow(equ)
                                                                plt.figure()
                                                                color = ('b','g','r')
                                                                for i, c in enumerate(color):
                                                                    hist = cv2.calcHist([equ], [i], None, [256], [0, 256])
                                                                    plt.plot(hist, color = c)
                                                                    plt.xlim([0,256])
                                                                plt.title("Histograma RGB, img 2")
                                                                plt.xlabel("Valor del color")
                                                                plt.ylabel("cantidad de pixeles")
                                                                plt.show()
                                                            cid = fig.canvas.mpl_connect('button_press_event', onclick)
                                                            plt.figure()
                                                            color = ('b','g','r')
                                                            for i, c in enumerate(color):
                                                                hist = cv2.calcHist([res], [i], None, [256], [0, 256])
                                                                plt.plot(hist, color = c)
                                                                plt.xlim([0,256])
                                                            plt.title("Histograma RGB, img 2")
                                                            plt.xlabel("Valor del color")
                                                            plt.ylabel("cantidad de pixeles")
                                                            plt.figure()
                                                            R, G, B = cv2.split(res)
                                                            output1_R = cv2.equalizeHist(R)
                                                            output1_G = cv2.equalizeHist(G)
                                                            output1_B = cv2.equalizeHist(B)
                                                            equ = cv2.merge((output1_R, output1_G, output1_B))
                                                            plt.imshow(equ)
                                                            plt.figure()
                                                            color = ('b','g','r')
                                                            for i, c in enumerate(color):
                                                                hist = cv2.calcHist([equ], [i], None, [256], [0, 256])
                                                                plt.plot(hist, color = c)
                                                                plt.xlim([0,256])
                                                            plt.title("Histograma RGB, img 2")
                                                            plt.xlabel("Valor del color")
                                                            plt.ylabel("cantidad de pixeles")
                                                            plt.show()
                                                        cid = fig.canvas.mpl_connect('button_press_event', onclick)
                                                        plt.figure()
                                                        color = ('b','g','r')
                                                        for i, c in enumerate(color):
                                                            hist = cv2.calcHist([res], [i], None, [256], [0, 256])
                                                            plt.plot(hist, color = c)
                                                            plt.xlim([0,256])
                                                        plt.title("Histograma RGB, img 2")
                                                        plt.xlabel("Valor del color")
                                                        plt.ylabel("cantidad de pixeles")
                                                        plt.figure()
                                                        R, G, B = cv2.split(res)
                                                        output1_R = cv2.equalizeHist(R)
                                                        output1_G = cv2.equalizeHist(G)
                                                        output1_B = cv2.equalizeHist(B)
                                                        equ = cv2.merge((output1_R, output1_G, output1_B))
                                                        plt.imshow(equ)
                                                        plt.figure()
                                                        color = ('b','g','r')
                                                        for i, c in enumerate(color):
                                                            hist = cv2.calcHist([equ], [i], None, [256], [0, 256])
                                                            plt.plot(hist, color = c)
                                                            plt.xlim([0,256])
                                                        plt.title("Histograma RGB, img 2")
                                                        plt.xlabel("Valor del color")
                                                        plt.ylabel("cantidad de pixeles")
                                                        plt.show()
                                                    cid = fig.canvas.mpl_connect('button_press_event', onclick)
                                                    plt.figure()
                                                    color = ('b','g','r')
                                                    for i, c in enumerate(color):
                                                        hist = cv2.calcHist([res], [i], None, [256], [0, 256])
                                                        plt.plot(hist, color = c)
                                                        plt.xlim([0,256])
                                                    plt.title("Histograma RGB, img 2")
                                                    plt.xlabel("Valor del color")
                                                    plt.ylabel("cantidad de pixeles")
                                                    plt.figure()
                                                    R, G, B = cv2.split(res)
                                                    output1_R = cv2.equalizeHist(R)
                                                    output1_G = cv2.equalizeHist(G)
                                                    output1_B = cv2.equalizeHist(B)
                                                    equ = cv2.merge((output1_R, output1_G, output1_B))
                                                    plt.imshow(equ)
                                                    plt.figure()
                                                    color = ('b','g','r')
                                                    for i, c in enumerate(color):
                                                        hist = cv2.calcHist([equ], [i], None, [256], [0, 256])
                                                        plt.plot(hist, color = c)
                                                        plt.xlim([0,256])
                                                    plt.title("Histograma RGB, img 2")
                                                    plt.xlabel("Valor del color")
                                                    plt.ylabel("cantidad de pixeles")
                                                    plt.show()
                                                cid = fig.canvas.mpl_connect('button_press_event', onclick)
                                                plt.figure()
                                                color = ('b','g','r')
                                                for i, c in enumerate(color):
                                                    hist = cv2.calcHist([res], [i], None, [256], [0, 256])
                                                    plt.plot(hist, color = c)
                                                    plt.xlim([0,256])
                                                plt.title("Histograma RGB, img 2")
                                                plt.xlabel("Valor del color")
                                                plt.ylabel("cantidad de pixeles")
                                                plt.figure()
                                                R, G, B = cv2.split(res)
                                                output1_R = cv2.equalizeHist(R)
                                                output1_G = cv2.equalizeHist(G)
                                                output1_B = cv2.equalizeHist(B)
                                                equ = cv2.merge((output1_R, output1_G, output1_B))
                                                plt.imshow(equ)
                                                plt.figure()
                                                color = ('b','g','r')
                                                for i, c in enumerate(color):
                                                    hist = cv2.calcHist([equ], [i], None, [256], [0, 256])
                                                    plt.plot(hist, color = c)
                                                    plt.xlim([0,256])
                                                plt.title("Histograma RGB, img 2")
                                                plt.xlabel("Valor del color")
                                                plt.ylabel("cantidad de pixeles")
                                                plt.show()
                                            cid = fig.canvas.mpl_connect('button_press_event', onclick)
                                            plt.figure()
                                            color = ('b','g','r')
                                            for i, c in enumerate(color):
                                                hist = cv2.calcHist([res], [i], None, [256], [0, 256])
                                                plt.plot(hist, color = c)
                                                plt.xlim([0,256])
                                            plt.title("Histograma RGB, img 2")
                                            plt.xlabel("Valor del color")
                                            plt.ylabel("cantidad de pixeles")
                                            plt.figure()
                                            R, G, B = cv2.split(res)
                                            output1_R = cv2.equalizeHist(R)
                                            output1_G = cv2.equalizeHist(G)
                                            output1_B = cv2.equalizeHist(B)
                                            equ = cv2.merge((output1_R, output1_G, output1_B))
                                            plt.imshow(equ)
                                            plt.figure()
                                            color = ('b','g','r')
                                            for i, c in enumerate(color):
                                                hist = cv2.calcHist([equ], [i], None, [256], [0, 256])
                                                plt.plot(hist, color = c)
                                                plt.xlim([0,256])
                                            plt.title("Histograma RGB, img 2")
                                            plt.xlabel("Valor del color")
                                            plt.ylabel("cantidad de pixeles")
                                            plt.show()
                                        cid = fig.canvas.mpl_connect('button_press_event', onclick)
                                        plt.figure()
                                        color = ('b','g','r')
                                        for i, c in enumerate(color):
                                            hist = cv2.calcHist([res], [i], None, [256], [0, 256])
                                            plt.plot(hist, color = c)
                                            plt.xlim([0,256])
                                        plt.title("Histograma RGB, img 2")
                                        plt.xlabel("Valor del color")
                                        plt.ylabel("cantidad de pixeles")
                                        plt.figure()
                                        R, G, B = cv2.split(res)
                                        output1_R = cv2.equalizeHist(R)
                                        output1_G = cv2.equalizeHist(G)
                                        output1_B = cv2.equalizeHist(B)
                                        equ = cv2.merge((output1_R, output1_G, output1_B))
                                        plt.imshow(equ)
                                        plt.figure()
                                        color = ('b','g','r')
                                        for i, c in enumerate(color):
                                            hist = cv2.calcHist([equ], [i], None, [256], [0, 256])
                                            plt.plot(hist, color = c)
                                            plt.xlim([0,256])
                                        plt.title("Histograma RGB, img 2")
                                        plt.xlabel("Valor del color")
                                        plt.ylabel("cantidad de pixeles")
                                        plt.show()
                                    cid = fig.canvas.mpl_connect('button_press_event', onclick)
                                    plt.figure()
                                    color = ('b','g','r')
                                    for i, c in enumerate(color):
                                        hist = cv2.calcHist([res], [i], None, [256], [0, 256])
                                        plt.plot(hist, color = c)
                                        plt.xlim([0,256])
                                    plt.title("Histograma RGB, img 2")
                                    plt.xlabel("Valor del color")
                                    plt.ylabel("cantidad de pixeles")
                                    plt.figure()
                                    R, G, B = cv2.split(res)
                                    output1_R = cv2.equalizeHist(R)
                                    output1_G = cv2.equalizeHist(G)
                                    output1_B = cv2.equalizeHist(B)
                                    equ = cv2.merge((output1_R, output1_G, output1_B))
                                    plt.imshow(equ)
                                    plt.figure()
                                    color = ('b','g','r')
                                    for i, c in enumerate(color):
                                        hist = cv2.calcHist([equ], [i], None, [256], [0, 256])
                                        plt.plot(hist, color = c)
                                        plt.xlim([0,256])
                                    plt.title("Histograma RGB, img 2")
                                    plt.xlabel("Valor del color")
                                    plt.ylabel("cantidad de pixeles")
                                    plt.show()
                                cid = fig.canvas.mpl_connect('button_press_event', onclick)
                                plt.figure()
                                
                                res = np.uint8(res)
                                color = ('b','g','r')
                                for i, c in enumerate(color):
                                    hist = cv2.calcHist([res], [i], None, [256], [0, 256])
                                    plt.plot(hist, color = c)
                                    plt.xlim([0,256])
                                plt.title("Histograma RGB, img 2")
                                plt.xlabel("Valor del color")
                                plt.ylabel("cantidad de pixeles")
                                plt.figure()
                                R, G, B = cv2.split(res)
                                output1_R = cv2.equalizeHist(R)
                                output1_G = cv2.equalizeHist(G)
                                output1_B = cv2.equalizeHist(B)
                                equ = cv2.merge((output1_R, output1_G, output1_B))
                                plt.imshow(equ)
                                plt.figure()
                                color = ('b','g','r')
                                for i, c in enumerate(color):
                                    hist = cv2.calcHist([equ], [i], None, [256], [0, 256])
                                    plt.plot(hist, color = c)
                                    plt.xlim([0,256])
                                plt.title("Histograma RGB, img 2")
                                plt.xlabel("Valor del color")
                                plt.ylabel("cantidad de pixeles")
                                plt.show()
                            cid = fig.canvas.mpl_connect('button_press_event', onclick)
                            plt.figure()
                            res = np.uint8(res)
                            color = ('b','g','r')
                            for i, c in enumerate(color):
                                hist = cv2.calcHist([res], [i], None, [256], [0, 256])
                                plt.plot(hist, color = c)
                                plt.xlim([0,256])
                            plt.title("Histograma RGB, img 2")
                            plt.xlabel("Valor del color")
                            plt.ylabel("cantidad de pixeles")
                            plt.figure()
                            R, G, B = cv2.split(res)
                            output1_R = cv2.equalizeHist(R)
                            output1_G = cv2.equalizeHist(G)
                            output1_B = cv2.equalizeHist(B)
                            equ = cv2.merge((output1_R, output1_G, output1_B))
                            plt.imshow(equ)
                            plt.figure()
                            color = ('b','g','r')
                            for i, c in enumerate(color):
                                hist = cv2.calcHist([equ], [i], None, [256], [0, 256])
                                plt.plot(hist, color = c)
                                plt.xlim([0,256])
                            plt.title("Histograma RGB, img 2")
                            plt.xlabel("Valor del color")
                            plt.ylabel("cantidad de pixeles")
                            plt.show()
                        cid = fig.canvas.mpl_connect('button_press_event', onclick)
                        plt.figure()
                        color = ('b','g','r')
                        for i, c in enumerate(color):
                            hist = cv2.calcHist([res], [i], None, [256], [0, 256])
                            plt.plot(hist, color = c)
                            plt.xlim([0,256])
                        plt.title("Histograma RGB, img 2")
                        plt.xlabel("Valor del color")
                        plt.ylabel("cantidad de pixeles")
                        plt.figure()
                        R, G, B = cv2.split(res)
                        output1_R = cv2.equalizeHist(R)
                        output1_G = cv2.equalizeHist(G)
                        output1_B = cv2.equalizeHist(B)
                        equ = cv2.merge((output1_R, output1_G, output1_B))
                        plt.imshow(equ)
                        plt.figure()
                        color = ('b','g','r')
                        for i, c in enumerate(color):
                            hist = cv2.calcHist([equ], [i], None, [256], [0, 256])
                            plt.plot(hist, color = c)
                            plt.xlim([0,256])
                        plt.title("Histograma RGB, img 2")
                        plt.xlabel("Valor del color")
                        plt.ylabel("cantidad de pixeles")
                        plt.show()
                    cid = fig.canvas.mpl_connect('button_press_event', onclick)
                    plt.figure()
                    color = ('b','g','r')
                    for i, c in enumerate(color):
                        hist = cv2.calcHist([res], [i], None, [256], [0, 256])
                        plt.plot(hist, color = c)
                        plt.xlim([0,256])
                    plt.title("Histograma RGB, img 2")
                    plt.xlabel("Valor del color")
                    plt.ylabel("cantidad de pixeles")
                    plt.figure()
                    R, G, B = cv2.split(res)
                    output1_R = cv2.equalizeHist(R)
                    output1_G = cv2.equalizeHist(G)
                    output1_B = cv2.equalizeHist(B)
                    equ = cv2.merge((output1_R, output1_G, output1_B))
                    plt.imshow(equ)
                    plt.figure()
                    color = ('b','g','r')
                    for i, c in enumerate(color):
                        hist = cv2.calcHist([equ], [i], None, [256], [0, 256])
                        plt.plot(hist, color = c)
                        plt.xlim([0,256])
                    plt.title("Histograma RGB, img 2")
                    plt.xlabel("Valor del color")
                    plt.ylabel("cantidad de pixeles")
                    plt.show()
                cid = fig.canvas.mpl_connect('button_press_event', onclick)
                plt.figure()
                color = ('b','g','r')
                for i, c in enumerate(color):
                    hist = cv2.calcHist([res], [i], None, [256], [0, 256])
                    plt.plot(hist, color = c)
                    plt.xlim([0,256])
                plt.title("Histograma RGB, img 2")
                plt.xlabel("Valor del color")
                plt.ylabel("cantidad de pixeles")
                plt.figure()
                R, G, B = cv2.split(res)
                output1_R = cv2.equalizeHist(R)
                output1_G = cv2.equalizeHist(G)
                output1_B = cv2.equalizeHist(B)
                equ = cv2.merge((output1_R, output1_G, output1_B))
                plt.imshow(equ)
                plt.figure()
                color = ('b','g','r')
                for i, c in enumerate(color):
                    hist = cv2.calcHist([equ], [i], None, [256], [0, 256])
                    plt.plot(hist, color = c)
                    plt.xlim([0,256])
                plt.title("Histograma RGB, img 2")
                plt.xlabel("Valor del color")
                plt.ylabel("cantidad de pixeles")
                plt.show()
            cid = fig.canvas.mpl_connect('button_press_event', onclick)
            plt.figure()
            res = np.uint8(res)
            color = ('b','g','r')
            for i, c in enumerate(color):
                hist = cv2.calcHist([res], [i], None, [256], [0, 256])
                plt.plot(hist, color = c)
                plt.xlim([0,256])
            plt.title("Histograma RGB, img 2")
            plt.xlabel("Valor del color")
            plt.ylabel("cantidad de pixeles")
            plt.figure()
            R, G, B = cv2.split(res)
            output1_R = cv2.equalizeHist(R)
            output1_G = cv2.equalizeHist(G)
            output1_B = cv2.equalizeHist(B)
            equ = cv2.merge((output1_R, output1_G, output1_B))
            plt.imshow(equ)
            plt.figure()
            color = ('b','g','r')
            for i, c in enumerate(color):
                hist = cv2.calcHist([equ], [i], None, [256], [0, 256])
                plt.plot(hist, color = c)
                plt.xlim([0,256])
            plt.title("Histograma RGB, img 2")
            plt.xlabel("Valor del color")
            plt.ylabel("cantidad de pixeles")
            plt.show()
        cid = fig.canvas.mpl_connect('button_press_event', onclick)
        plt.figure()
        color = ('b','g','r')
        for i, c in enumerate(color):
            hist = cv2.calcHist([res], [i], None, [256], [0, 256])
            plt.plot(hist, color = c)
            plt.xlim([0,256])
        plt.title("Histograma RGB, img 2")
        plt.xlabel("Valor del color")
        plt.ylabel("cantidad de pixeles")
        plt.figure()
        R, G, B = cv2.split(res)
        output1_R = cv2.equalizeHist(R)
        output1_G = cv2.equalizeHist(G)
        output1_B = cv2.equalizeHist(B)
        equ = cv2.merge((output1_R, output1_G, output1_B))
        plt.imshow(equ)
        plt.figure()
        color = ('b','g','r')
        for i, c in enumerate(color):
            hist = cv2.calcHist([equ], [i], None, [256], [0, 256])
            plt.plot(hist, color = c)
            plt.xlim([0,256])
        plt.title("Histograma RGB, img 2")
        plt.xlabel("Valor del color")
        plt.ylabel("cantidad de pixeles")
        plt.show()
    cid = fig.canvas.mpl_connect('button_press_event', onclick)
    plt.figure()
    color = ('b','g','r')
    for i, c in enumerate(color):
        hist = cv2.calcHist([res], [i], None, [256], [0, 256])
        plt.plot(hist, color = c)
        plt.xlim([0,256])
    plt.title("Histograma RGB, resultante")
    plt.xlabel("Valor del color")
    plt.ylabel("cantidad de pixeles")
    plt.figure()
    R, G, B = cv2.split(res)
    output1_R = cv2.equalizeHist(R)
    output1_G = cv2.equalizeHist(G)
    output1_B = cv2.equalizeHist(B)
    equ = cv2.merge((output1_R, output1_G, output1_B))
    plt.imshow(equ)
    plt.figure()
    color = ('b','g','r')
    for i, c in enumerate(color):
        hist = cv2.calcHist([equ], [i], None, [256], [0, 256])
        plt.plot(hist, color = c)
        plt.xlim([0,256])
    plt.title("Histograma equalizado, resultante")
    plt.xlabel("Valor del color")
    plt.ylabel("cantidad de pixeles")
    plt.show()     
cid = fig.canvas.mpl_connect('button_press_event', onclick)
plt.figure()
color = ('b','g','r')
for i, c in enumerate(color):
    hist = cv2.calcHist([img], [i], None, [256], [0, 256])
    plt.plot(hist, color = c)
    plt.xlim([0,256])
plt.title("Histograma RGB, img 1")
plt.xlabel("Valor del color")
plt.ylabel("cantidad de pixeles")
plt.figure()
color = ('b','g','r')
for i, c in enumerate(color):
    hist = cv2.calcHist([img2], [i], None, [256], [0, 256])
    plt.plot(hist, color = c)
    plt.xlim([0,256])
plt.title("Histograma RGB, img 2")
plt.xlabel("Valor del color")
plt.ylabel("cantidad de pixeles")
plt.figure()
R, G, B = cv2.split(img2)
output1_R = cv2.equalizeHist(R)
output1_G = cv2.equalizeHist(G)
output1_B = cv2.equalizeHist(B)
equ = cv2.merge((output1_R, output1_G, output1_B))
plt.imshow(equ)
plt.figure()
R, G, B = cv2.split(img)
output1_R = cv2.equalizeHist(R)
output1_G = cv2.equalizeHist(G)
output1_B = cv2.equalizeHist(B)
equ2 = cv2.merge((output1_R, output1_G, output1_B))
plt.imshow(equ2)
plt.figure()
color = ('b','g','r')
for i, c in enumerate(color):
    hist = cv2.calcHist([equ], [i], None, [256], [0, 256])
    plt.plot(hist, color = c)
    plt.xlim([0,256])
plt.title("Histograma equalizado, img 1")
plt.xlabel("Valor del color")
plt.ylabel("cantidad de pixeles")
plt.figure()
color = ('b','g','r')
for i, c in enumerate(color):
    hist = cv2.calcHist([equ2], [i], None, [256], [0, 256])
    plt.plot(hist, color = c)
    plt.xlim([0,256])
plt.title("Histograma equalizado, img 2")
plt.xlabel("Valor del color")
plt.ylabel("cantidad de pixeles")
plt.show()
plt.show()
